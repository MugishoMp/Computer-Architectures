#pragma once

enum InstructionType {
  INVALID,
  R,
  I,
  S,
  SH,
  J,
  F,
  DN,
  ORK,
  DROK,
  OK,
  RES,
  DABROO,
  RBR,
  RAI,
  DAK,
  KABK,
  RABRO,
  OABR,
  DABLK
};

// This enum class contains RISC-V instruction mnemonics
enum class InstructionMnemonic {
	L_J,
	L_JAL,
	L_BNF,
	L_BF,
	L_NOP,
	L_MOVHI,
	L_JR,
	L_MACI,
	L_LWA,
	// zero extended read
	L_LWZ,
	L_LBZ,
	// sign extended read
	L_LBS,
	L_ADDI,
	L_ANDI,
	L_ORI,
	L_SLLI,
	L_SRLI,
	L_SFEQI,
	L_SW,
	L_SB,
	L_SH,
	L_ADD,
	L_SUB,
	L_AND,
	L_OR,
	L_SLL,
	L_SRL,
	L_SRA,
	L_SFEQ,
	L_SFNE,
	// unsigned comparison
	L_SFGTU, 
	// signed comparison
	L_SFGTS,
	L_SFGES,
	L_SFLES,
	// ------------------------unused
	L_ADRP,
	L_MACRC,
	L_SYS,
	L_TRAP,
	L_MSYNC,
	L_PSYNC,
	L_CSYNC,
	L_RFE,
	L_JALR,
	L_LF,
	L_CUST1,
	L_CUST2,
	L_CUST3,
	L_CUST4,
	L_LD,
	L_LWS,
	L_LHZ,
	L_LHS,
	L_ADDIC,
	L_XORI,
	L_MULI,
	L_MFSPR,
	L_SRAI,
	L_RORI,
	L_SFNEI,
	L_SFGTUI,
	L_SFGEUI,
	L_SFLTUI,
	L_SFLEUI,
	L_SFGTSI,
	L_SFGESI,
	L_SFLTSI,
	L_SFLESI,
	L_MTSPR,
	L_MAC,
	L_MACU,
	L_MSB,
	L_MSBU,
	L_SWA,
	L_EXTHS,
	L_EXTWS,
	L_EXTBS,
	L_EXTWZ,
	L_EXTHZ,
	L_EXTBZ,
	L_ADDC,
	L_XOR,
	L_CMOV,
	L_FF1,
	L_ROR,
	L_FL1,
	L_MUL,
	L_MULD,
	L_DIV,
	L_DIVU,
	L_MULU,
	L_MULDU,
	L_SFGEU,
	L_SFLTU,
	L_SFLEU,
	L_SFLTS,
	L_CUST5,
	L_CUST6,
	L_CUST7,
	L_CUST8,
	LV_CUST1,
	LV_CUST2,
	LV_CUST3,
	LV_CUST4,
	LV_ALL_EQ_B,
	LV_ALL_EQ_H,
	LV_ALL_GE_B,
	LV_ALL_GE_H,
	LV_ALL_GT_B,
	LV_ALL_GT_H,
	LV_ALL_LE_B,
	LV_ALL_LE_H,
	LV_ALL_LT_B,
	LV_ALL_LT_H,
	LV_ALL_NE_B,
	LV_ALL_NE_H,
	LV_ANY_EQ_B,
	LV_ANY_EQ_H,
	LV_ANY_GE_B,
	LV_ANY_GE_H,
	LV_ANY_GT_B,
	LV_ANY_GT_H,
	LV_ANY_LE_B,
	LV_ANY_LE_H,
	LV_ANY_LT_B,
	LV_ANY_LT_H,
	LV_ANY_NE_B,
	LV_ANY_NE_H,
	LV_ADD_B,
	LV_ADD_H,
	LV_ADDS_B,
	LV_ADDS_H,
	LV_ADDU_B,
	LV_ADDU_H,
	LV_ADDUS_B,
	LV_ADDUS_H,
	LV_AND,
	LV_AVG_B,
	LV_AVG_H,
	LV_CMP_EQ_B,
	LV_CMP_EQ_H,
	LV_CMP_GE_B,
	LV_CMP_GE_H,
	LV_CMP_GT_B,
	LV_CMP_GT_H,
	LV_CMP_LE_B,
	LV_CMP_LE_H,
	LV_CMP_LT_B,
	LV_CMP_LT_H,
	LV_CMP_NE_B,
	LV_CMP_NE_H,
	LV_MADDS_H,
	LV_MAX_B,
	LV_MAX_H,
	LV_MERGE_B,
	LV_MERGE_H,
	LV_MIN_B,
	LV_MIN_H,
	LV_MSUBS_H,
	LV_MULS_H,
	LV_NAND,
	LV_NOR,
	LV_OR,
	LV_PACK_B,
	LV_PACK_H,
	LV_PACKS_B,
	LV_PACKS_H,
	LV_PACKUS_B,
	LV_PACKUS_H,
	LV_PERM_N,
	LV_RL_B,
	LV_RL_H,
	LV_SLL_B,
	LV_SLL_H,
	LV_SLL,
	LV_SRL_B,
	LV_SRL_H,
	LV_SRA_B,
	LV_SRA_H,
	LV_SRL,
	LV_SUB_B,
	LV_SUB_H,
	LV_SUBS_B,
	LV_SUBS_H,
	LV_SUBU_B,
	LV_SUBU_H,
	LV_SUBUS_B,
	LV_SUBUS_H,
	LV_UNPACK_B,
	LV_UNPACK_H,
	LV_XOR,
	LF_SFEQ_S,
	LF_SFNE_S,
	LF_SFGT_S,
	LF_SFGE_S,
	LF_SFLT_S,
	LF_SFLE_S,
	LF_SFEQ_D,
	LF_SFNE_D,
	LF_SFGT_D,
	LF_SFGE_D,
	LF_SFLT_D,
	LF_SFLE_D,
	LF_SFUEQ_S,
	LF_SFUNE_S,
	LF_SFUGT_S,
	LF_SFUGE_S,
	LF_SFULT_S,
	LF_SFULE_S,
	LF_SFUN_S,
	LF_STOD_D,
	LF_DTOS_D,
	LF_SFUEQ_D,
	LF_SFUNE_D,
	LF_SFUGT_D,
	LF_SFUGE_D,
	LF_SFULT_D,
	LF_SFULE_D,
	LF_SFUN_D,
	LF_CUST1_S,
	LF_CUST1_D,
	LF_ITOF_S,
	LF_FTOI_S,
	LF_ITOF_D,
	LF_FTOI_D,
	LF_ADD_S,
	LF_SUB_S,
	LF_MUL_S,
	LF_DIV_S,
	LF_MADD_S,
	LF_ADD_D,
	LF_SUB_D,
	LF_MUL_D,
	LF_DIV_D,
	LF_MADD_D,
    INVALID
};
